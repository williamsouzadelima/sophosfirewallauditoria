# Strati Audit System - Docker Compose
# Para desenvolvimento e produção

version: '3.8'

# Configurações compartilhadas
x-common-variables: &common-variables
  FLASK_ENV: ${FLASK_ENV:-production}
  FLASK_DEBUG: ${FLASK_DEBUG:-False}
  SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-this}
  HOST: 0.0.0.0
  PORT: 8080
  LOG_LEVEL: ${LOG_LEVEL:-INFO}
  TIMEZONE: ${TIMEZONE:-America/Sao_Paulo}

services:
  # Aplicação principal
  strati-audit:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-1.0.0}
    image: strati-audit:latest
    container_name: strati-audit-app
    restart: unless-stopped
    
    # Variáveis de ambiente
    environment:
      <<: *common-variables
      # Database
      DATABASE_PATH: /app/data/databases/strati_audit.db
      # Sophos
      SOPHOS_AUDIT_SCRIPT: /app/sophos-firewall-audit/sophos_firewall_audit.py
      # Security
      JWT_EXPIRATION_HOURS: ${JWT_EXPIRATION_HOURS:-24}
      # Email (opcional)
      EMAIL_ENABLED: ${EMAIL_ENABLED:-false}
      SMTP_SERVER: ${SMTP_SERVER:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      ALERT_EMAIL: ${ALERT_EMAIL:-}
      # Backup
      BACKUP_ENABLED: ${BACKUP_ENABLED:-true}
      BACKUP_INTERVAL_HOURS: ${BACKUP_INTERVAL_HOURS:-6}
      # Performance
      WORKERS: ${WORKERS:-4}
      WORKER_CLASS: ${WORKER_CLASS:-sync}
      WORKER_TIMEOUT: ${WORKER_TIMEOUT:-300}
    
    # Portas
    ports:
      - "${HOST_PORT:-8080}:8080"
    
    # Volumes
    volumes:
      # Dados persistentes
      - strati_data:/app/data
      - strati_logs:/app/logs
      - strati_reports:/app/reports
      - strati_backups:/app/backups
      # Configurações (opcional)
      - type: bind
        source: ${CONFIG_PATH:-./config}
        target: /app/config
        read_only: true
      # Arquivo .env (opcional)
      - type: bind
        source: ${ENV_FILE:-./.env}
        target: /app/.env
        read_only: true
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Dependências
    depends_on:
      - redis
      - postgres
    
    # Networks
    networks:
      - strati-network

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    container_name: strati-redis
    restart: unless-stopped
    
    # Configurações
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    # Volumes
    volumes:
      - strati_redis:/data
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    # Networks
    networks:
      - strati-network

  # PostgreSQL para produção (opcional)
  postgres:
    image: postgres:15-alpine
    container_name: strati-postgres
    restart: unless-stopped
    
    # Variáveis de ambiente
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-strati_audit}
      POSTGRES_USER: ${POSTGRES_USER:-strati}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-strati_password_change_this}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=pt_BR.UTF-8 --lc-ctype=pt_BR.UTF-8"
    
    # Volumes
    volumes:
      - strati_postgres:/var/lib/postgresql/data
      - type: bind
        source: ./docker/postgres/init.sql
        target: /docker-entrypoint-initdb.d/init.sql
        read_only: true
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-strati} -d ${POSTGRES_DB:-strati_audit}"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    # Networks
    networks:
      - strati-network

  # Nginx para proxy reverso (produção)
  nginx:
    image: nginx:alpine
    container_name: strati-nginx
    restart: unless-stopped
    
    # Portas
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    
    # Volumes
    volumes:
      - type: bind
        source: ./docker/nginx/nginx.conf
        target: /etc/nginx/nginx.conf
        read_only: true
      - type: bind
        source: ./docker/nginx/conf.d
        target: /etc/nginx/conf.d
        read_only: true
      # SSL certificates (se disponível)
      - type: bind
        source: ${SSL_CERTS_PATH:-./docker/nginx/ssl}
        target: /etc/nginx/ssl
        read_only: true
    
    # Dependências
    depends_on:
      - strati-audit
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    # Networks
    networks:
      - strati-network
    
    # Apenas para produção
    profiles:
      - production

  # Prometheus para monitoramento (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: strati-prometheus
    restart: unless-stopped
    
    # Comando
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    # Portas
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    
    # Volumes
    volumes:
      - type: bind
        source: ./docker/prometheus/prometheus.yml
        target: /etc/prometheus/prometheus.yml
        read_only: true
      - strati_prometheus:/prometheus
    
    # Networks
    networks:
      - strati-network
    
    # Apenas para monitoramento
    profiles:
      - monitoring

  # Grafana para dashboards (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: strati-grafana
    restart: unless-stopped
    
    # Variáveis de ambiente
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    
    # Portas
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    
    # Volumes
    volumes:
      - strati_grafana:/var/lib/grafana
      - type: bind
        source: ./docker/grafana/provisioning
        target: /etc/grafana/provisioning
        read_only: true
    
    # Dependências
    depends_on:
      - prometheus
    
    # Networks
    networks:
      - strati-network
    
    # Apenas para monitoramento
    profiles:
      - monitoring

  # Portainer para gerenciamento (opcional)
  portainer:
    image: portainer/portainer-ce:latest
    container_name: strati-portainer
    restart: unless-stopped
    
    # Portas
    ports:
      - "${PORTAINER_PORT:-9000}:9000"
    
    # Volumes
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - strati_portainer:/data
    
    # Security
    security_opt:
      - no-new-privileges:true
    
    # Networks
    networks:
      - strati-network
    
    # Apenas para desenvolvimento
    profiles:
      - development

# Volumes persistentes
volumes:
  strati_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}
  
  strati_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./logs}
  
  strati_reports:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${REPORTS_PATH:-./reports}
  
  strati_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUPS_PATH:-./backups}
  
  strati_redis:
    driver: local
  
  strati_postgres:
    driver: local
  
  strati_prometheus:
    driver: local
  
  strati_grafana:
    driver: local
  
  strati_portainer:
    driver: local

# Rede customizada
networks:
  strati-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
